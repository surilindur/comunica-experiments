{
  "@context": "https://linkedsoftwaredependencies.org/bundles/npm/rdf-dataset-fragmenter/^2.0.0/components/context.jsonld",
  "@id": "urn:rdf-dataset-fragmenter:default",
  "@type": "Fragmenter",
  "quadSource": {
    "@id": "urn:rdf-dataset-fragmenter:source:default",
    "@type": "QuadSourceComposite",
    "sources": [
      {
        "@type": "QuadSourceFile",
        "filePath": "out-snb/social_network/social_network_static_0_0.ttl"
      },
      {
        "@type": "QuadSourceFile",
        "filePath": "out-snb/social_network/social_network_person_0_0.ttl"
      },
      {
        "@type": "QuadSourceFile",
        "filePath": "out-snb/social_network/social_network_activity_0_0.ttl"
      },
      {
        "@type": "QuadSourceFile",
        "filePath": "out-enhanced/social_network_auxiliary.ttl"
      }
    ]
  },
  "transformers": [
    {
      "@type": "QuadTransformerBlankToNamed",
      "searchRegex": "^(b[0-9]*_tagclass)",
      "replacementString": "http://localhost:3100/tagclass/$1"
    },
    {
      "@type": "QuadTransformerReplaceIri",
      "searchRegex": "^http://www.ldbc.eu",
      "replacementString": "http://localhost:3100"
    },
    {
      "@type": "QuadTransformerReplaceIri",
      "searchRegex": "^http://dbpedia.org",
      "replacementString": "http://localhost:3200"
    },
    {
      "@type": "QuadTransformerReplaceIri",
      "searchRegex": "^http://www.w3.org/2002/07/owl",
      "replacementString": "http://localhost:3000/owl"
    },
    {
      "@type": "QuadTransformerReplaceIri",
      "searchRegex": "^http://localhost:3100/ldbc_socialnet/1.0/data/pers([0-9]*)$",
      "replacementString": "http://localhost:3000/pods/$1/profile/card#me"
    },
    {
      "comment": "Map all blank node objects to fragments on their subjects",
      "@type": "QuadTransformerBlankToFragment"
    },
    {
      "@type": "QuadTransformerRemapResourceIdentifier",
      "newIdentifierSeparator": "../noise/",
      "typeRegex": "vocabulary/Noise$",
      "identifierPredicateRegex": "vocabulary/noise$",
      "targetPredicateRegex": "vocabulary/hasCreator$"
    },
    {
      "@type": "QuadTransformerAppendResourceLink",
      "typeRegex": "vocabulary/Person$",
      "predicate": "http://www.w3.org/ns/pim/space#storage",
      "link": "../"
    },
    {
      "@type": "QuadTransformerAppendQuad",
      "matcher": {
        "@type": "QuadMatcherComponentValue",
        "component": "predicate",
        "valueRegex": "vocabulary/containerOf$"
      },
      "subject": {
        "@type": "TermTemplateQuadComponent",
        "component": "object"
      },
      "predicate": {
        "@type": "TermTemplateStaticNamedNode",
        "value": "http://www.w3.org/2000/01/rdf-schema#seeAlso"
      },
      "object": {
        "@type": "TermTemplateQuadComponent",
        "component": "subject"
      },
      "graph": {
        "@type": "TermTemplateQuadComponent",
        "component": "graph"
      }
    },
    {
      "@type": "QuadTransformerDistinct",
      "transformer": {
        "@type": "QuadTransformerAppendQuadLink",
        "matcher": {
          "@type": "QuadMatcherComponentValue",
          "component": "predicate",
          "valueRegex": "vocabulary/hasCreator$"
        },
        "identifier": "object",
        "predicate": "http://localhost:3000/internal/postsFragmentation",
        "link": "http://localhost:3000/internal/FragmentationPerResource"
      }
    },
    {
      "@type": "QuadTransformerRemapResourceIdentifier",
      "newIdentifierSeparator": "../posts/",
      "typeRegex": "vocabulary/Post$",
      "identifierPredicateRegex": "vocabulary/id$",
      "targetPredicateRegex": "vocabulary/hasCreator$"
    },
    {
      "@type": "QuadTransformerDistinct",
      "transformer": {
        "@type": "QuadTransformerAppendResourceSolidTypeIndex",
        "typeRegex": "vocabulary/Post$",
        "profilePredicateRegex": "vocabulary/hasCreator$",
        "typeIndex": "../settings/publicTypeIndex",
        "entrySuffix": "#entry-posts",
        "entryReference": "../posts/",
        "entryContainer": "true"
      }
    },
    {
      "@type": "QuadTransformerDistinct",
      "transformer": {
        "@type": "QuadTransformerAppendQuadLink",
        "matcher": {
          "@type": "QuadMatcherComponentValue",
          "component": "predicate",
          "valueRegex": "vocabulary/hasCreator$"
        },
        "identifier": "object",
        "predicate": "http://localhost:3000/internal/commentsFragmentation",
        "link": "http://localhost:3000/internal/FragmentationPerResource"
      }
    },
    {
      "@type": "QuadTransformerRemapResourceIdentifier",
      "newIdentifierSeparator": "../comments/",
      "typeRegex": "vocabulary/Comment$",
      "identifierPredicateRegex": "vocabulary/id$",
      "targetPredicateRegex": "vocabulary/hasCreator$"
    },
    {
      "@type": "QuadTransformerDistinct",
      "transformer": {
        "@type": "QuadTransformerAppendResourceSolidTypeIndex",
        "typeRegex": "vocabulary/Comment$",
        "profilePredicateRegex": "vocabulary/hasCreator$",
        "typeIndex": "../settings/publicTypeIndex",
        "entrySuffix": "#entry-comments",
        "entryReference": "../comments/",
        "entryContainer": "true"
      }
    },
    {
      "comment": "Create copies of the specified share of pods, with graph term defined, to send to the SPARQL endpoint",
      "@type": "QuadTransformerAppendQuad",
      "matcher": {
        "@type": "QuadMatcherComponentValue",
        "component": "subject",
        "valueRegex": "^(.+\\/pods\\/[0-9]+\\/).*$",
        "probability": 1.0
      },
      "subject": {
        "@type": "TermTemplateQuadComponent",
        "component": "subject"
      },
      "predicate": {
        "@type": "TermTemplateQuadComponent",
        "component": "predicate"
      },
      "object": {
        "@type": "TermTemplateQuadComponent",
        "component": "object"
      },
      "graph": {
        "@type": "TermTemplateQuadComponent",
        "component": "subject",
        "termType": "NamedNode",
        "valueRegex": "^(.+\\/pods\\/[0-9]+\\/).*$",
        "valueReplacement": "$1"
      }
    },
    {
      "comment": "Add the (pod, rdf:type, void:Dataset) triple to every pod that can be found in the SPARQL endpoint",
      "@type": "QuadTransformerDistinct",
      "transformer": {
        "@type": "QuadTransformerAppendQuad",
        "matcher": {
          "@type": "QuadMatcherComponentValue",
          "component": "graph",
          "valueRegex": "^.+$"
        },
        "subject": {
          "@type": "TermTemplateQuadComponent",
          "component": "graph"
        },
        "predicate": {
          "@type": "TermTemplateStaticNamedNode",
          "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
        },
        "object": {
          "@type": "TermTemplateStaticNamedNode",
          "value": "http://rdfs.org/ns/void#Dataset"
        },
        "graph": {
          "@type": "TermTemplateStaticNamedNode",
          "value": ""
        }
      }
    },
    {
      "comment": "Add the (pod, void:uriSpace, pod) triple to every pod that can be found in the SPARQL endpoint",
      "@type": "QuadTransformerDistinct",
      "transformer": {
        "@type": "QuadTransformerAppendQuad",
        "matcher": {
          "@type": "QuadMatcherComponentValue",
          "component": "graph",
          "valueRegex": "^.+$"
        },
        "subject": {
          "@type": "TermTemplateQuadComponent",
          "component": "graph"
        },
        "predicate": {
          "@type": "TermTemplateStaticNamedNode",
          "value": "http://rdfs.org/ns/void#uriSpace"
        },
        "object": {
          "@type": "TermTemplateQuadComponent",
          "component": "graph",
          "termType": "Literal"
        },
        "graph": {
          "@type": "TermTemplateStaticNamedNode",
          "value": ""
        }
      }
    },
    {
      "comment": "Add the (pod, void:sparqlEndpoint, endpoint) triple to every pod that can be found in the SPARQL endpoint",
      "@type": "QuadTransformerDistinct",
      "transformer": {
        "@type": "QuadTransformerAppendQuad",
        "matcher": {
          "@type": "QuadMatcherComponentValue",
          "component": "graph",
          "valueRegex": "^.+$"
        },
        "subject": {
          "@type": "TermTemplateQuadComponent",
          "component": "graph"
        },
        "predicate": {
          "@type": "TermTemplateStaticNamedNode",
          "value": "http://rdfs.org/ns/void#sparqlEndpoint"
        },
        "object": {
          "@type": "TermTemplateQuadComponent",
          "component": "graph",
          "termType": "NamedNode",
          "valueRegex": "^(.+)$",
          "valueReplacement": "http://localhost:4000/sparql?default-graph-uri=$1"
        },
        "graph": {
          "@type": "TermTemplateStaticNamedNode",
          "value": ""
        }
      }
    }
  ],
  "fragmentationStrategy": {
    "@type": "FragmentationStrategyComposite",
    "strategies": [
      {
        "@type": "FragmentationStrategySubject"
      }
    ]
  },
  "quadSink": {
    "@id": "urn:rdf-dataset-fragmenter:sink:default",
    "@type": "QuadSinkComposite",
    "sinks": [
      {
        "comment": "Quads that go in documents will be reduced to triples and written to their paths",
        "@type": "QuadSinkFiltered",
        "filter": {
          "@type": "QuadMatcherComponentValue",
          "component": "graph",
          "valueRegex": "^$"
        },
        "sink": {
          "@type": "QuadSinkComposite",
          "sinks": [
            {
              "@type": "QuadSinkFile",
              "log": true,
              "outputFormat": "application/n-triples",
              "fileExtension": ".nt",
              "iriToPath": {
                "http://": "out-fragments/http/"
              }
            },
            {
              "@type": "QuadSinkFiltered",
              "filter": {
                "@type": "QuadMatcherResourceType",
                "typeRegex": "vocabulary/Person$",
                "matchFullResource": false
              },
              "sink": {
                "@type": "QuadSinkCsv",
                "file": "out-fragments/parameters-persons.csv",
                "columns": [
                  "subject"
                ]
              }
            },
            {
              "@type": "QuadSinkFiltered",
              "filter": {
                "@type": "QuadMatcherResourceType",
                "typeRegex": "vocabulary/Comment$",
                "matchFullResource": false
              },
              "sink": {
                "@type": "QuadSinkCsv",
                "file": "out-fragments/parameters-comments.csv",
                "columns": [
                  "subject"
                ]
              }
            },
            {
              "@type": "QuadSinkFiltered",
              "filter": {
                "@type": "QuadMatcherResourceType",
                "typeRegex": "vocabulary/Post$",
                "matchFullResource": false
              },
              "sink": {
                "@type": "QuadSinkCsv",
                "file": "out-fragments/parameters-posts.csv",
                "columns": [
                  "subject"
                ]
              }
            }
          ]
        }
      },
      {
        "comment": "Quads with graph element defined should be dumped to a single file for SPARQL endpoint",
        "@type": "QuadSinkFiltered",
        "filter": {
          "@type": "QuadMatcherComponentValue",
          "component": "graph",
          "valueRegex": "^.+$"
        },
        "sink": {
          "@type": "QuadSinkFile",
          "log": false,
          "outputFormat": "application/n-quads",
          "fileExtension": ".nq",
          "iriToPath": {
            "^(.*)$": "out-fragments/http/localhost_4000/data"
          }
        }
      }
    ]
  }
}